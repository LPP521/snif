/*######     Copyright (c) 1997-2013 Ufasoft  http://ufasoft.com  mailto:support@ufasoft.com,  Sergey Pavlov  mailto:dev@ufasoft.com #######################################
#                                                                                                                                                                          #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation;  #
# either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the      #
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU #
# General Public License along with this program; If not, see <http://www.gnu.org/licenses/>                                                                               #
##########################################################################################################################################################################*/

#pragma once
#define _DYNAMIC_BITSET_

#include EXT_HEADER(vector)

namespace ExtSTL {

class dynamic_bitsetBase {
public:
	typedef size_t size_type;

	static const size_type npos = size_type(-1);

	class reference {
		dynamic_bitsetBase& m_bs;
		size_t m_pos;

		reference(dynamic_bitsetBase& bs, size_t pos)
			:	m_bs(bs)
			,	m_pos(pos)
		{}

		reference& operator=(bool val) {
			m_bs.replace(m_pos, val);
			return *this;
		}
	};

	dynamic_bitsetBase(size_type size)
		:	m_size(size)
	{}

	size_type size() const { return m_size; }
	bool empty() const { return size() == 0; }

	bool test(size_type pos) const {
		return ByteRef(pos) & byte(1 << (pos & 7));
	}
	
	bool operator[](size_type pos) const { return test(pos); }

	void replace(size_type pos, bool val);
	void flip(size_type pos);
	void reset(size_type pos);

	void set(size_type pos) {
		ByteRef(pos) |= 1 << (pos & 7);
	}
	
	virtual void resize(size_t siz) =0;
	
	void push_back(bool val) {
		resize(size()+1);
		replace(size()-1, val);
	}

	void clear() { resize(0); }
protected:
	size_type m_size;

	virtual byte& ByteRef(size_t pos) const =0;
};

template <typename T = unsigned long long>
class dynamic_bitset : public dynamic_bitsetBase {
	typedef dynamic_bitsetBase base;
public:
	typedef T block_type;
	typedef size_t block_width_type;
    
	static const block_width_type bits_per_block = sizeof(block_type)*8;

	std::vector<block_type> m_data;

	dynamic_bitset(size_t size = 0)
		:	base(size)
		,	m_data((size+bits_per_block-1)/bits_per_block)
	{}

	size_type num_blocks() const { return m_data.size(); }

	size_type max_size() const { return std::min(m_data.max_size()*bits_per_block, std::numeric_limits<size_type>::max()); }

	void reserve(size_t siz) {
		m_data.reserve((siz+bits_per_block-1) / bits_per_block);
	}

	void resize(size_t siz) override {
		size_t prevSize = size();
		m_data.resize(((m_size = siz)+bits_per_block-1)/bits_per_block);
		for (size_t i=prevSize; i<m_size; ++i)
			reset(i);
	}

	using base::set;
	void set() {
		std::fill(m_data.begin(), m_data.end(), block_type(-1));
	}

	using base::reset;
	void reset() {
		std::fill(m_data.begin(), m_data.end(), block_type(0));
	}
private:
	byte& ByteRef(size_t pos) const override {
		ASSERT(pos < size());
		return *((byte*)&m_data[0] + (pos >> 3));
	}
};


template <typename T, typename I>
void to_block_range(const dynamic_bitset<T>& bs, I it) {
	std::copy(bs.m_data.begin(), bs.m_data.end(), it);
}


} // ExtSTL::

namespace std {
using ExtSTL::dynamic_bitset;
using ExtSTL::to_block_range;
}

